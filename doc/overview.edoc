%% -*- mode:html -*-

@author Fred Youhanaie <fyrlang@anydata.co.uk>
@copyright 2021-2022 Fred Youhanaie
@version 0.1.0

@doc

<h3>Introduction</h3>

<p>`pnml' is an Erlang module for processing Petri Net Markup Language
  (PNML) files.
</p>

<h4>PNML</h4>

<p>PNML is an XML based mark up language that is used for defining
  Petri Net models and acts as an interchange format for Petri net
  based tools.
</p>

<p>To learn more about `PNML'
  see <a href="http://www.pnml.org/">http://www.pnml.org/</a>. Also,
  the following two papers provide good introductions to the markup
  language:
</p>

<ul>
  <li>L.M. Hillah and E. Kindler and F. Kordon and L. Petrucci and
  N. Tr√®ves, A primer on the Petri Net Markup Language and ISO/IEC
  15909-2, [<a href="http://www.pnml.org/papers/pnnl76.pdf">PDF</a>]
  </li>

  <li>Michael Weber and Ekkart Kindler, The Petri Net Markup Language,
    2003 [<a href="http://www.pnml.org/papers/PNML_LNCS.pdf">PDF</a>]
  </li>
</ul>

<h4>Petri Nets</h4>

<p>To quote from the description on Wikipedia:
</p>

<blockquote>
  <p><i>A Petri net, also known as a place/transition (PT) net, is one
    of several mathematical modeling languages for the description of
    distributed systems. It is a class of discrete event dynamic
    system.</i>
  </p>
</blockquote>

<p>To learn more about Petri Nets follow the links listed below:
</p>

<ul>

  <li><a href="https://en.wikipedia.org/wiki/Petri_net">
      https://en.wikipedia.org/wiki/Petri_net</a>
  </li>

  <li><a href="https://www.informatik.uni-hamburg.de/TGI/PetriNets/index.php">
      https://www.informatik.uni-hamburg.de/TGI/PetriNets/index.php</a>
  </li>

  <li><a href="http://www.scholarpedia.org/article/Petri_net">
      http://www.scholarpedia.org/article/Petri_net</a>
  </li>

</ul>

<h3>Module Overview</h3>

<p>This is a behaviour module to be used by other modules, such as
  `pnml_ets', via callbacks.
</p>

<p>To start the process of parsing the pnml file, the callback module
  should call the `read/3' function. While `read/3' is scanning the PNML
  file it will call the appropriate handler functions.
</p>

<p>The callback module should provide three callback modules,
  `handle_begin/3' will be called whenever a start tag is encountered,
  `handle_end/2' called whenever an end tag is detected, and
  `handle_text/2' is called whenever character data is seen.
</p>

<h4>The Callback Module</h4>

<p>The callback module should export three functions for processing
the individual PNML elements. these are described below:
</p>

<ul>
  <li>`handle_begin(Tag, Attr, State)', is called when a new tag is
  encountered. It takes three arguments: `Tag' is an `atom'
  corresponding to the element tag, such as `net', `place',
  `transition' etc, and `Attrs' is the list of attributes from the
  `startElement' event, see `xmerl_sax_parser'. The attributes can be
  converted to a map of attribute name/value pairs using the
  `pnml:attr_map/1' function.
  </li>

  <li>`handle_end(Tag, State)' corresponds to the `endElement' event,
    which signals the `</Tag>' element. It can be used to finish off
    any outstanding work for this element.
  </li>

  <li>`handle_text(Text, State)' corresponds to the `characters'
    event, which is the text within an element. Most commonly this is
    an integer corresponding to the `initialMarking' of a `place' or
    the `inscription' of an `arc'.
  </li>
</ul>

<p>Associated with each callback module is a state variable that is
  initialized during the call to `pnml:read/3'. The current contents
  of the state variable is passed to the handler functions, which
  should return it, optionally updated, for the future calls to the
  handlers.
</p>

<p>The structure of the state variable is entirely dependent on the
  callback module, for example the `pnml_counter' module will maintain
  a map where the keys are the PNML element tags and the values are
  counts of the corresponding tags encountered so far.
</p>

<p>Once `read/3' has concluded the processing of the file, the final
  contents of the state variable is returned to the caller.
</p>

<p>A number of sample callback modules have been provided in the
  `Examples/' directory of the git repo.
</p>

@end
